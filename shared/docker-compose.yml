version: '3.8'

services:
  # ScaleSim Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: scalesim-backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DATABASE_PATH=/app/data/scalesim.db
      - CORS_ORIGIN=http://localhost:3000
    volumes:
      - ./backend:/app
      - /app/node_modules
      - scalesim-data:/app/data
    depends_on:
      - redis
    networks:
      - scalesim-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ScaleSim Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: scalesim-frontend
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://localhost:3001
      - VITE_WS_URL=ws://localhost:3001
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - scalesim-network
    restart: unless-stopped

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: scalesim-redis
    ports:
      - "6379:6379"
    volumes:
      - scalesim-redis:/data
    networks:
      - scalesim-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Nginx reverse proxy (production)
  nginx:
    image: nginx:alpine
    container_name: scalesim-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - scalesim-static:/var/www/static
    depends_on:
      - frontend
      - backend
    networks:
      - scalesim-network
    restart: unless-stopped
    profiles:
      - production

  # PostgreSQL database (production)
  postgres:
    image: postgres:15-alpine
    container_name: scalesim-postgres
    environment:
      POSTGRES_DB: scalesim
      POSTGRES_USER: scalesim
      POSTGRES_PASSWORD: scalesim_password
    ports:
      - "5432:5432"
    volumes:
      - scalesim-postgres:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - scalesim-network
    restart: unless-stopped
    profiles:
      - production

  # Grafana for monitoring (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: scalesim-grafana
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - scalesim-grafana:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - scalesim-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Prometheus for metrics (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: scalesim-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - scalesim-prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - scalesim-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  scalesim-data:
    driver: local
  scalesim-redis:
    driver: local
  scalesim-postgres:
    driver: local
  scalesim-grafana:
    driver: local
  scalesim-prometheus:
    driver: local
  scalesim-static:
    driver: local

networks:
  scalesim-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 